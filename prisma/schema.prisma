// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique @map("email")
  password       String       @map("password")
  username       String       @unique @map("username")
  fullName       String       @map("full_name")
  normalizedName String       @map("normalized_name")
  signature      String?      @map("signature")
  avatar         String?      @map("avatar")
  role           Role         @default(USER) @map("role")
  deviceTokens   String[]     @map("device_tokens")
  socialGraph    SocialGraph?
  socialGraphId  String?      @map("social_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  videos         Video[]

  @@map("users")
}

model SocialGraph {
  id        String   @id @default(uuid())
  following String[] @map("following")
  followers String[] @map("followers")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social_graph")
}

model Video {
  id              String    @id @default(uuid())
  title           String    @map("title")
  normalizedTitle String    @map("normalized_title")
  duration        Float     @map("duration") // in seconds
  url             String    @map("url") // video URL
  hlsUrl          String    @map("hls_url") // HLS URL for adaptive streaming
  thumbnail       String    @map("thumbnail") // thumbnail URL
  cloudFileId     String    @map("cloud_file_id") // ID of the file in cloud storage
  width           Float     @map("width") // width of the video
  height          Float     @map("height") // height of the video
  size            Float     @map("size") // size of the video in bytes
  isPrivate       Boolean   @default(false) @map("is_private")
  commentable     Boolean   @default(true) @map("commentable")
  userId          String    @map("user_id")
  user            User      @relation(fields: [userId], references: [id])
  comments        Comment[]
  likes           Like[]
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("videos")
}

model Comment {
  id        String   @id @default(uuid())
  comment   String   @map("comment")
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, videoId])
  @@map("likes")
}

model Otp {
  id        String   @id @default(uuid())
  code      String   @map("code")
  email     String   @map("email")
  type      OtpType  @map("type")
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email, type])
  @@map("otps")
}

model Notification {
  id         String           @id @default(uuid())
  userId     String           @map("user_id")
  receiverId String           @map("receiver_id")
  title      String           @map("title")
  body       String           @map("body")
  imageUrl   String?          @map("image_url")
  type       NotificationType @map("type")
  videoId    String?          @map("video_id")
  isRead     Boolean          @default(false) @map("is_read")
  readAt     DateTime?        @map("read_at")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  @@map("notifications")
}

enum Role {
  ADMIN
  USER
}

enum OtpType {
  REGISTER
  PASSWORD_RESET
}

enum NotificationType {
  FOLLOW
  POST_VIDEO
  LIKE_VIDEO
  COMMENT_VIDEO
  SHARE_VIDEO
  SYSTEM
}
